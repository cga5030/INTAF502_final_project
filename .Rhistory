n <- 100 # number of monte carlo simulations
greturns <- matrix(NA,nrow=3,ncol=n)
View(greturns)
# run some simulations
n <- 100 # number of monte carlo simulations
greturns <- matrix(NA,nrow=3,ncol=n)
# run some simulations
n <- 10 # number of monte carlo simulations
greturns <- matrix(NA,nrow=3,ncol=n)
View(greturns)
greturns[1,]=1
View(greturns)
greturns[2,]=2
greturns[3,]=3
View(greturns)
# run some simulations
n <- 100000 # number of monte carlo simulations
greturns <- matrix(NA,nrow=3,ncol=n)
greturns <- matrix(999,nrow=3,ncol=n)
View(greturns)
# run some simulations
n <- 10 # number of monte carlo simulations
greturns <- matrix(999,nrow=3,ncol=n)
View(greturns)
for (i in 1:n){
# step 1: market condition
market <- runif(1,min=0,max=1)
# if hot
if (market>0 && market<=0.65){
greturn_A <- rnorm(1, mean=0.05,  sd=0.02)   # gross return for asset A
greturn_B <- rnorm(1, mean=-0.01, sd=0.001)  # gross return for asset B
greturn_C <- rnorm(1, mean=-0.01, sd=0.02)   # gross return for asset C
}
# if calm
if (market>0.65 && market <= 0.75){
greturn_A <- rnorm(1, mean=0.01,  sd=0.01)   # gross return for asset A
greturn_B <- rnorm(1, mean=0.005, sd=0.001)  # gross return for asset B
greturn_C <- rnorm(1, mean=0.01,  sd=.01)    # gross return for asset C
}
# if cold
if (market>0.75 && market<1){
greturn_A <- rnorm(1, mean=-0.05, sd=0.03)   # gross return for asset A
greturn_B <- rnorm(1, mean=0.01,  sd=0.01)   # gross return for asset B
greturn_C <- rnorm(1, mean=0.04,  sd=0.01)   # gross return for asset C
}
# store our samples
greturns[1,i] <- greturn_A
greturns[2,i] <- greturn_B
greturns[3,i] <- greturn_C
}
View(greturns)
# run some simulations
n <- 10 # number of monte carlo simulations
gain_or_loss <- matrix(999,nrow=3,ncol=n)
rm(list=ls())
######
# Asset allocation
asset_a <- 700000 # amount invested in asset A (USD)
asset_b <- 200000 # amount invested in asset A (USD)
asset_c <- 100000 # amount invested in asset A (USD)
# Market forecasts
p_hot   <- 0.65 # probability of "hot" asset market
p_calm  <- 0.1  # probability of "calm" asset market
p_cold  <- 0.25 # probability of "cold" asset market
# run some simulations
n <- 10 # number of monte carlo simulations
gain_or_loss <- matrix(999,nrow=3,ncol=n)
# step 1: simulate market condition
market <- runif(1,min=0,max=1)
# step 2: draw log gross returns
# if hot
if (market>0 && market<=0.65){
greturn_A <- rnorm(1, mean=0.05,  sd=0.02)   # gross return for asset A
greturn_B <- rnorm(1, mean=-0.01, sd=0.001)  # gross return for asset B
greturn_C <- rnorm(1, mean=-0.01, sd=0.02)   # gross return for asset C
}
# if calm
if (market>0.65 && market <= 0.75){
greturn_A <- rnorm(1, mean=0.01,  sd=0.01)   # gross return for asset A
greturn_B <- rnorm(1, mean=0.005, sd=0.001)  # gross return for asset B
greturn_C <- rnorm(1, mean=0.01,  sd=.01)    # gross return for asset C
}
# if cold
if (market>0.75 && market<1){
greturn_A <- rnorm(1, mean=-0.05, sd=0.03)   # gross return for asset A
greturn_B <- rnorm(1, mean=0.01,  sd=0.01)   # gross return for asset B
greturn_C <- rnorm(1, mean=0.04,  sd=0.01)   # gross return for asset C
}
market
rm(list=ls())
#Case 1: logY=a+bX
a=1
b=1
X=rnorm(500,mean=2,sd=1) #rnorm is a normal distribution generating random numbers
logY=a+b*X+rnorm(500,mean=0,sd=0.2)
Y=exp(logY)
mydata1=cbind(X,logY,Y) #cnimd means you combine everything together
plot(mydata1[,c("X","logY")])
plot(mydata1[,c("X","Y")])
logY
y
Y
if (market>0 && market<=0.65){
log_greturn_A <- rnorm(1, mean=0.05,  sd=0.02)   # gross return for asset A
log_greturn_B <- rnorm(1, mean=-0.01, sd=0.001)  # gross return for asset B
log_greturn_C <- rnorm(1, mean=-0.01, sd=0.02)   # gross return for asset C
}
# if calm
if (market>0.65 && market <= 0.75){
log_greturn_A <- rnorm(1, mean=0.01,  sd=0.01)   # gross return for asset A
log_greturn_B <- rnorm(1, mean=0.005, sd=0.001)  # gross return for asset B
log_greturn_C <- rnorm(1, mean=0.01,  sd=.01)    # gross return for asset C
}
# if cold
if (market>0.75 && market<1){
log_greturn_A <- rnorm(1, mean=-0.05, sd=0.03)   # gross return for asset A
log_greturn_B <- rnorm(1, mean=0.01,  sd=0.01)   # gross return for asset B
log_greturn_C <- rnorm(1, mean=0.04,  sd=0.01)   # gross return for asset C
}
rm(list=ls())
######
# Asset allocation
asset_a <- 700000 # amount invested in asset A (USD)
asset_b <- 200000 # amount invested in asset A (USD)
asset_c <- 100000 # amount invested in asset A (USD)
# Market forecasts
p_hot   <- 0.65 # probability of "hot" asset market
p_calm  <- 0.1  # probability of "calm" asset market
p_cold  <- 0.25 # probability of "cold" asset market
# run some simulations
n <- 10 # number of monte carlo simulations
gain_or_loss <- matrix(999,nrow=3,ncol=n)
# step 1: simulate market condition
market <- runif(1,min=0,max=1)
# step 2: draw log gross returns
# if hot
if (market>0 && market<=0.65){
log_greturn_A <- rnorm(1, mean=0.05,  sd=0.02)   # gross return for asset A
log_greturn_B <- rnorm(1, mean=-0.01, sd=0.001)  # gross return for asset B
log_greturn_C <- rnorm(1, mean=-0.01, sd=0.02)   # gross return for asset C
}
# if calm
if (market>0.65 && market <= 0.75){
log_greturn_A <- rnorm(1, mean=0.01,  sd=0.01)   # gross return for asset A
log_greturn_B <- rnorm(1, mean=0.005, sd=0.001)  # gross return for asset B
log_greturn_C <- rnorm(1, mean=0.01,  sd=.01)    # gross return for asset C
}
# if cold
if (market>0.75 && market<1){
log_greturn_A <- rnorm(1, mean=-0.05, sd=0.03)   # gross return for asset A
log_greturn_B <- rnorm(1, mean=0.01,  sd=0.01)   # gross return for asset B
log_greturn_C <- rnorm(1, mean=0.04,  sd=0.01)   # gross return for asset C
}
# step 3: convert log gross returns to gross returns
greturn_a <- exp(log_greturn_A)
log_greturn_A
greturn_a
market =.9
# step 2: draw log gross returns
# if hot
if (market>0 && market<=0.65){
log_greturn_A <- rnorm(1, mean=0.05,  sd=0.02)   # gross return for asset A
log_greturn_B <- rnorm(1, mean=-0.01, sd=0.001)  # gross return for asset B
log_greturn_C <- rnorm(1, mean=-0.01, sd=0.02)   # gross return for asset C
}
# if calm
if (market>0.65 && market <= 0.75){
log_greturn_A <- rnorm(1, mean=0.01,  sd=0.01)   # gross return for asset A
log_greturn_B <- rnorm(1, mean=0.005, sd=0.001)  # gross return for asset B
log_greturn_C <- rnorm(1, mean=0.01,  sd=.01)    # gross return for asset C
}
# if cold
if (market>0.75 && market<1){
log_greturn_A <- rnorm(1, mean=-0.05, sd=0.03)   # gross return for asset A
log_greturn_B <- rnorm(1, mean=0.01,  sd=0.01)   # gross return for asset B
log_greturn_C <- rnorm(1, mean=0.04,  sd=0.01)   # gross return for asset C
}
log_greturn_A
# step 3: convert log gross returns to gross returns
greturn_A <- exp(log_greturn_A) # (USD)
greturn_B <- exp(log_greturn_B) # (USD)
greturn_C <- exp(log_greturn_C) # (USD)
source('~/Elina_MonteCarlo.R')
market = .9
# step 2: draw log gross returns
# if hot
if (market>0 && market<=0.65){
log_greturn_A <- rnorm(1, mean=0.05,  sd=0.02)   # gross return for asset A
log_greturn_B <- rnorm(1, mean=-0.01, sd=0.001)  # gross return for asset B
log_greturn_C <- rnorm(1, mean=-0.01, sd=0.02)   # gross return for asset C
}
# if calm
if (market>0.65 && market <= 0.75){
log_greturn_A <- rnorm(1, mean=0.01,  sd=0.01)   # gross return for asset A
log_greturn_B <- rnorm(1, mean=0.005, sd=0.001)  # gross return for asset B
log_greturn_C <- rnorm(1, mean=0.01,  sd=.01)    # gross return for asset C
}
# if cold
if (market>0.75 && market<1){
log_greturn_A <- rnorm(1, mean=-0.05, sd=0.03)   # gross return for asset A
log_greturn_B <- rnorm(1, mean=0.01,  sd=0.01)   # gross return for asset B
log_greturn_C <- rnorm(1, mean=0.04,  sd=0.01)   # gross return for asset C
}
# step 2: draw log gross returns
# if hot
if (market>0 && market<=0.65){
log_greturn_A <- rnorm(1, mean=0.05,  sd=0.02)   # gross return for asset A
log_greturn_B <- rnorm(1, mean=-0.01, sd=0.001)  # gross return for asset B
log_greturn_C <- rnorm(1, mean=-0.01, sd=0.02)   # gross return for asset C
}
# if calm
if (market>0.65 && market <= 0.75){
log_greturn_A <- rnorm(1, mean=0.01,  sd=0.01)   # gross return for asset A
log_greturn_B <- rnorm(1, mean=0.005, sd=0.001)  # gross return for asset B
log_greturn_C <- rnorm(1, mean=0.01,  sd=.01)    # gross return for asset C
}
# if cold
if (market>0.75 && market<1){
log_greturn_A <- rnorm(1, mean=-0.05, sd=0.03)   # gross return for asset A
log_greturn_B <- rnorm(1, mean=0.01,  sd=0.01)   # gross return for asset B
log_greturn_C <- rnorm(1, mean=0.04,  sd=0.01)   # gross return for asset C
}
# step 2: draw log gross returns
# if hot
if (market>0 && market<=0.65){
log_greturn_A <- rnorm(1, mean=0.05,  sd=0.02)   # gross return for asset A
log_greturn_B <- rnorm(1, mean=-0.01, sd=0.001)  # gross return for asset B
log_greturn_C <- rnorm(1, mean=-0.01, sd=0.02)   # gross return for asset C
}
# if calm
if (market>0.65 && market <= 0.75){
log_greturn_A <- rnorm(1, mean=0.01,  sd=0.01)   # gross return for asset A
log_greturn_B <- rnorm(1, mean=0.005, sd=0.001)  # gross return for asset B
log_greturn_C <- rnorm(1, mean=0.01,  sd=.01)    # gross return for asset C
}
# if cold
if (market>0.75 && market<1){
log_greturn_A <- rnorm(1, mean=-0.05, sd=0.03)   # gross return for asset A
log_greturn_B <- rnorm(1, mean=0.01,  sd=0.01)   # gross return for asset B
log_greturn_C <- rnorm(1, mean=0.04,  sd=0.01)   # gross return for asset C
}
exp(log_greturn_A)
#Case 2: Y=a+b*log(X)
X=runif(500,min=0.1,max=5)
logX=log(X)
Y=a+b*logX+rnorm(500,mean=0,sd=0.2)
mydata2=cbind(X,logX,Y)
plot(mydata2[,c("logX","Y")])
plot(mydata2[,c("X","Y")])
a=1
b=1
X=rnorm(500,mean=2,sd=1) #rnorm is a normal distribution generating random numbers
logY=a+b*X+rnorm(500,mean=0,sd=0.2)
Y=exp(logY)
mydata1=cbind(X,logY,Y) #cnimd means you combine everything together
plot(mydata1[,c("X","logY")])
plot(mydata1[,c("X","Y")])
X=runif(500,min=0.1,max=5)
logX=log(X)
Y=a+b*logX+rnorm(500,mean=0,sd=0.2)
mydata2=cbind(X,logX,Y)
plot(mydata2[,c("logX","Y")])
plot(mydata2[,c("X","Y")])
X=runif(500,min=0.1,max=5)
logX=log(X)
logY=a+b*logX+rnorm(500,mean=0,sd=0.2)
Y=exp(Y)
mydata3<-cbind(X,logX,Y,logY)
plot(mydata3[,c("logX","logY")])
plot(mydata3[,c("X","Y")])
# step 3: convert log gross returns to gross returns
greturn_A <- exp(log_greturn_A) # (USD)
greturn_B <- exp(log_greturn_B) # (USD)
greturn_C <- exp(log_greturn_C) # (USD)
asset_a*greturn_A
# step 4: calculate gain or loss
gain_or_loss_A <- asset_a - (asset_a*greturn_A)
gain_or_loss_A/asset_a*100
# step 4: calculate gain or loss
gain_or_loss_A <- (asset_a*greturn_A) - asset_a
# run some simulations
n <- 10 # number of monte carlo simulations
source('~/Elina_MonteCarlo.R')
View(gain_or_loss)
# run some simulations
n <- 10 # number of monte carlo simulations
gain_or_loss <- matrix(999,nrow=4,ncol=n)
View(gain_or_loss)
gain_or_loss[4,1] <- 'HOT'
View(gain_or_loss)
source('~/Elina_MonteCarlo.R')
View(gain_or_loss)
source('~/Elina_MonteCarlo.R')
View(gain_or_loss)
hist(gain_or_loss[4,])
gain_or_loss[4,]
totals <- gain_or_loss[4,]
totals
hist(totals)
plot(totals)
class(gain_or_loss)
totals <- as.numeric(gain_or_loss[4,])
hist(totals)
source('~/Elina_MonteCarlo.R')
hist(totals)
?quantile()
quantile(totals,probs=.05)
value_at_risk <- quantile(totals,probs=0.05)
value_at_risk
quantile(totals,probs=.5)
hist(as.numeric(gain_or_loss[1,]))
hist(as.numeric(gain_or_loss[2,]))
hist(as.numeric(gain_or_loss[3,]))
hist(totals, xlab="Gain or Loss (USD)") # produce a histogram for gains or losses
hist(totals, xlab="Gain or Loss (USD)") # produce a histogram for gains or losses
# Equation
m= 90 kg
# Equation
m = 90 kg
# Equation
m = 90
# Equation
m = 90 # kg
g = 9.8 # m/s²
A = 0.7 # m²
rho = 0.99 # kg/m^3
Cd = 1 # for belly-to-earth
vt = sqrt((2*m*g)/(rho*A*Cd))
# Equation
m = 90 # kg
g = 9.81 # m/s²
A = 0.7 # m²
rho = 0.99 # kg/m^3
Cd = 1 # for belly-to-earth
vt = sqrt((2*m*g)/(rho*A*Cd))
vt = sqrt((2*m*g)/(rho*A*Cd))
if(TRUE){
# Equation
m = 90 # kg
g = 9.81 # m/s²
A = 0.7 # m²
rho = 1.23 # kg/m^3
Cd = 1 # for belly-to-earth
vt = sqrt((2*m*g)/(rho*A*Cd))
}
rho = (1.112+1.225)/2 # kg/m^3 # - we care about near-surface speeds
if(TRUE){
# Equation
m = 90 # kg
g = 9.81 # m/s²
A = 0.7 # m²
rho = (1.112+1.225)/2 # kg/m^3 # - we care about near-surface speeds
Cd = 1 # for belly-to-earth
vt = sqrt((2*m*g)/(rho*A*Cd))
}
if(TRUE){
# Equation
m = 90 # kg
g = 9.81 # m/s²
A = 0.7 # m²
rho = .99 # kg/m^3 # - we care about near-surface speeds
Cd = 1 # for belly-to-earth
vt = sqrt((2*m*g)/(rho*A*Cd))
}
if(TRUE){
# Equation
m = 90 # kg
g = 9.81 # m/s²
A = 0.7 # m²
rho = (1.112+1.225)/2 # kg/m^3 # - lowest 1000 km above surface
Cd = 1 # for belly-to-earth
vt = sqrt((2*m*g)/(rho*A*Cd))
}
# Equation
m = 82+11 # kg human + parachute
m
m
if(TRUE){
# Belly-to-earth
m = 82 # kg human + parachute
g = 9.81 # m/s²
A = 0.7 # m²
rho = (1.112+1.225)/2 # kg/m^3 # - lowest 1000 km above surface
Cd = 1 # for belly-to-earth
vt = sqrt((2*m*g)/(rho*A*Cd))
}
if(TRUE){
# Belly-to-earth
m = 93 # kg human + parachute
g = 9.81 # m/s²
A = 0.7 # m²
rho = (1.112+1.225)/2 # kg/m^3 # - lowest 1000 km above surface
Cd = 1 # for belly-to-earth
vt = sqrt((2*m*g)/(rho*A*Cd))
}
if(TRUE){
# Belly-to-earth
m_human = 93 # kg human + parachute
g = 9.81 # m/s²
A_human = 0.7 # m²
rho = (1.112+1.225)/2 # kg/m^3 # - lowest 1000 km above surface
Cd_human = 1 # for belly-to-earth
vt_human = sqrt((2*m*g)/(rho*A*Cd))
}
if(TRUE){
# With chute
m_chute = 82+11 # kg human + parachute
g = 9.81 # m/s²
A_chute = 0.7 # m²
rho = (1.112+1.225)/2 # kg/m^3 # - lowest 1000 km above surface
Cd_chute = 1 # for belly-to-earth
vt_chute = sqrt((2*m*g)/(rho*A*Cd))
}
if(TRUE){
# With chute
m_chute = 82+11 # kg human + parachute
g = 9.81 # m/s²
A_chute = 19.51 # m²
rho = (1.112+1.225)/2 # kg/m^3 # - lowest 1000 km above surface
Cd_chute = 1 # for belly-to-earth
vt_chute = sqrt((2*m*g)/(rho*A*Cd))
}
# Uncle Elon
rm(list=ls())
if(TRUE){
# Belly-to-earth
m_human = 93 # kg human
g = 9.81 # m/s²
A_human = 0.7 # m²
rho = (1.112+1.225)/2 # kg/m^3 # - lowest 1000 km above surface
Cd_human = 1 # for belly-to-earth
vt_human = sqrt((2*m_human*g)/(rho*A_human*Cd_human))
# With chute
m_chute = 82+11 # kg human + parachute
g = 9.81 # m/s²
A_chute = 19.51 # m²
rho = (1.112+1.225)/2 # kg/m^3 # - lowest 1000 km above surface
Cd_chute = 1 # for belly-to-earth
vt_chute = sqrt((2*m_chute*g)/(rho*A_chute*Cd_chute))
}
if(TRUE){
# Belly-to-earth
m_human = 93 # kg human
g = 9.81 # m/s²
A_human = 0.7 # m²
rho = (1.112+1.225)/2 # kg/m^3 # - lowest 1000 km above surface
Cd_human = 1 # for belly-to-earth
vt_human = sqrt((2*m_human*g)/(rho*A_human*Cd_human))
# With chute
m_chute = 82+11 # kg human + parachute
g = 9.81 # m/s²
A_chute = 19.51 # m²
rho = (1.112+1.225)/2 # kg/m^3 # - lowest 1000 km above surface
Cd_chute = 1.75 # for belly-to-earth
vt_chute = sqrt((2*m_chute*g)/(rho*A_chute*Cd_chute))
}
if(TRUE){
# Belly-to-earth
m_human = 93 # kg human
g = 9.81 # m/s²
A_human = 0.7 # m²
rho = (1.112+1.225)/2 # kg/m^3 # - lowest 1000 km above surface
Cd_human = 1 # for belly-to-earth
vt_human = sqrt((2*m_human*g)/(rho*A_human*Cd_human))
# With chute
m_chute = 82+11 # kg human + parachute
g = 9.81 # m/s²
A_chute = 19.51 # m²
rho = (1.112+1.225)/2 # kg/m^3 # - lowest 1000 km above surface
Cd_chute = 1.9 # for belly-to-earth
vt_chute = sqrt((2*m_chute*g)/(rho*A_chute*Cd_chute))
}
if(TRUE){
# Belly-to-earth
m_human = 93 # kg human
g = 9.81 # m/s²
A_human = 0.7 # m²
rho = (1.112+1.225)/2 # kg/m^3 # - lowest 1000 km above surface
Cd_human = 1 # for belly-to-earth
vt_human = sqrt((2*m_human*g)/(rho*A_human*Cd_human))
# With chute
m_chute = 82+11 # kg human + parachute
g = 9.81 # m/s²
A_chute = 19.51 # m²
rho = (1.112+1.225)/2 # kg/m^3 # - lowest 1000 km above surface
Cd_chute = 4 # for belly-to-earth
vt_chute = sqrt((2*m_chute*g)/(rho*A_chute*Cd_chute))
}
source('~/UncleElon.R')
source('~/UncleElon.R')
source('~/UncleElon.R')
source('~/UncleElon.R')
# On Mars
m_chute_mars = 82+11 # kg human + parachute
g_mars = 9.81 # m/s²
A_chute = 19.51 # m²
rho_mars = (1.112+1.225)/2 # kg/m^3 # - lowest 1000 km above surface
Cd_chute = 1.3 # for belly-to-earth
vt_chute_mars = sqrt((2*m_chute*g)/(rho*A_chute*Cd_chute))
source('~/UncleElon.R')
# On Mars
m_chute_mars = 82+11 # kg human + parachute
g_mars = 3.7 # m/s²
A_chute = 19.51 # m²
rho_mars = (1.112+1.225)/2 # kg/m^3 # - lowest 1000 km above surface
Cd_chute = 1.3 # for belly-to-earth
vt_mars = sqrt((2*m_chute*g)/(rho*A_chute*Cd_chute))
source('~/UncleElon.R')
source('~/UncleElon.R')
source('~/UncleElon.R')
source('~/UncleElon.R')
setwd("D:/Documents/GRAD SCHOOL/1 - SPRING 2021/INTAF 502/final project/INTAF502_final_project")
